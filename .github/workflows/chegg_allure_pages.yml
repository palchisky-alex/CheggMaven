
name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]
    

jobs:
  build:
  
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-java@v3
      with:
        distribution: 'temurin'
        java-version: '17'
    - name: Build & Install
      run: mvn -B install -D skipTests --no-transfer-progress
    - name: Install Playwright
      run: mvn exec:java -e -D exec.mainClass=com.microsoft.playwright.CLI -D exec.args="install --with-deps"
    - name: Run tests
      run: mvn test
  
    - name: Get Allure history
      uses: actions/checkout@v2
      if: always()
      continue-on-error: true
      with:
        ref: gh-pages
        path: gh-pages

    - name: Allure Report action from marketplace
      uses: simple-elf/allure-report-action@master
      if: always()
      id: allure-report
      with:
        allure_results: allure-results
        gh_pages: gh-pages
        allure_report: allure-report
        allure_history: allure-history

    - name: Deploy report to Github Pages
      if: always()
      uses: peaceiris/actions-gh-pages@v2
      env:
        PERSONAL_TOKEN: ${{ secrets.CHEGG }}
        PUBLISH_BRANCH: gh-pages
        PUBLISH_DIR: allure-history

           

  all-tests:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v1
      - name: Set up JDK 1.8
        uses: actions/setup-java@v1
        with:
          java-version: 1.8
      - uses: actions/github-script@v4
        id: allure-job-uid
        with:
          result-encoding: string
          script: |
            const result = await github.actions.getWorkflowRun({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });
            return `${context.repo.owner}/${context.repo.repo}/actions/workflows/${result.data.workflow_id}`
      - name: Download allurectl
        run: |
          wget https://github.com/allure-framework/allurectl/releases/latest/download/allurectl_linux_386 -O ./allurectl
          chmod +x ./allurectl
      - name: Prepare TestPlan
        run: ./allurectl job-run plan --output-file ${ALLURE_TESTPLAN_PATH}
      - name: Build with Gradle
        run: ./allurectl watch -- ./gradlew test # allows sending the test results in the real time 
        env:
          ALLURE_JOB_UID: ${{steps.allure-job-uid.outputs.result}}
          TEST_ENDPOINT: ${{ github.event.inputs.TEST_ENDPOINT }}
          TEST_BROWSER: ${{ github.event.inputs.TEST_BROWSER }}
